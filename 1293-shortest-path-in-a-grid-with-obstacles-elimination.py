class Solution(object):
    def shortestPath(self, grid, k):
        """
        :type grid: List[List[int]]
        :type k: int
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        target = (m-1, n-1)
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        visited = set()

        # Use BFS, DFS would TLE
        from collections import deque
        q = deque([(0, 0, k, 0)])

        while q:
            x, y, r, cost = q.popleft()

            if (x, y) == target:
                return cost

            for move in directions:
                x1, y1 = x+move[0], y+move[1]

                if x1 < 0 or x1 >= m or y1 < 0 or y1 >= n:
                    continue

                if grid[x1][y1] == 1:
                    if r == 0:
                        continue

                    if (x1, y1, r-1) in visited:
                        continue

                    q.append((x1, y1, r-1, cost+1))
                    visited.add((x1, y1, r-1))

                else:
                    if (x1, y1, r) in visited:
                        continue

                    q.append((x1, y1, r, cost+1))
                    visited.add((x1, y1, r))

        return -1


s = Solution()

data = [
    [[[0,0,0],
    [1,1,0],
    [0,0,0],
    [0,1,1],
    [0,0,0]],
    1], # 6
    [[[0,1,1],
    [1,1,1],
    [1,0,0]],
    1], # -1
    [[[0,1,0,0,0,1,0,0],
      [0,1,0,1,0,1,0,1],
      [0,0,0,1,0,0,1,0]], 1], # 13
    [[[0,1,0,1],
      [0,1,0,0],
      [0,0,1,0],
      [1,0,0,1],
      [0,1,0,0]], 18],  # 7
    [[[0,0,1,0,0,0,0,1,0,1,1,0,0,1,1],
      [0,0,0,1,1,0,0,1,1,0,1,0,0,0,1],
      [1,1,0,0,0,0,0,1,0,1,0,0,1,0,0],
      [1,0,1,1,1,1,0,0,1,1,0,1,0,0,1],
      [1,0,0,0,1,1,0,1,1,0,0,1,1,1,1],
      [0,0,0,1,1,1,0,1,1,0,0,1,1,1,1],
      [0,0,0,1,0,1,0,0,0,0,1,1,0,1,1],
      [1,0,0,1,1,1,1,1,1,0,0,0,1,1,0],
      [0,0,1,0,0,1,1,1,1,1,0,1,0,0,0],
      [0,0,0,1,1,0,0,1,1,1,1,1,1,0,0],
      [0,0,0,0,1,1,1,0,0,1,1,1,0,1,0]],27],  #24

      [[[0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1],
       [1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1],
       [0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,1],
       [1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1],
       [1,1,1,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0],[0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1],[1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1],[1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0],[0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1],[0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1],[0,1,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0],[1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0],[1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,1],[0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0],[1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1],[0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0],[0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0],[0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1],[1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1],[0,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1],[1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1],[0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0],[0,1,1,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0],[1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0],[1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0],[1,1,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0],[1,0,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1,1],[0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1],[0,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0],[0,0,1,0,0,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1],[1,0,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1],[0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0]], 183],
]

for d in data:
    print s.shortestPath(*d)
